generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  VETERINARIAN
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  role          Role     @default(USER) // Define se é ADMIN, USER ou VET
  pets          Pet[]
  userPets      UserPet[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([email]) // Indexação para buscas por email
}

model Pet {
  id            String    @id @default(uuid())
  name          String
  ownerId       String
  locations     Location[]
  userPets      UserPet[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId]) // Indexação para buscas por dono
}

model UserPet {
  userId String
  petId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet    Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@id([userId, petId]) // Chave composta para evitar duplicidade
}

model Location {
  id        String   @id @default(uuid())
  petId     String
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@index([petId, timestamp(sort: Desc)]) // Indexação para melhorar buscas
}

